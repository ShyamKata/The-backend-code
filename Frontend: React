1. Backend Setup with FastAPI
a. Set Up the Backend Environment
1 Create a directory for your backend project:

mkdir document-summary-backend
cd document-summary-backend

2 Create and activate a virtual environment:

python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

3 Install the required libraries:

pip install fastapi uvicorn transformers python-multipart pymupdf python-docx

b. Create the FastAPI Application
1 Create a file named 'main.py':

from fastapi import FastAPI, File, UploadFile
from typing import Dict
from transformers import pipeline
import fitz  # PyMuPDF for PDF
import docx
import os

app = FastAPI()

# Load the summarization model
summarizer = pipeline("summarization")

def read_text_from_pdf(file_path: str) -> str:
    text = ""
    pdf_document = fitz.open(file_path)
    for page in pdf_document:
        text += page.get_text()
    pdf_document.close()
    return text

def read_text_from_docx(file_path: str) -> str:
    text = ""
    doc = docx.Document(file_path)
    for para in doc.paragraphs:
        text += para.text + "\n"
    return text

def read_text_from_txt(file_path: str) -> str:
    with open(file_path, 'r') as file:
        return file.read()

@app.post("/upload/")
async def upload(file: UploadFile = File(...)) -> Dict[str, str]:
    file_location = f"temp/{file.filename}"
    os.makedirs(os.path.dirname(file_location), exist_ok=True)
    with open(file_location, "wb") as buffer:
        buffer.write(await file.read())
    return {"file_path": file_location}

@app.post("/summarize/")
async def summarize(file_path: str) -> Dict[str, str]:
    if file_path.endswith('.pdf'):
        text = read_text_from_pdf(file_path)
    elif file_path.endswith('.docx'):
        text = read_text_from_docx(file_path)
    elif file_path.endswith('.txt'):
        text = read_text_from_txt(file_path)
    else:
        return {"error": "Unsupported file type."}

    summary = summarizer(text, max_length=150, min_length=30, do_sample=False)
    os.remove(file_path)  # Clean up the file
    return {"summary": summary[0]['summary_text']}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

2 Create a 'requirements.txt file':

pip freeze > requirements.txt

3 Create a 'README.md file':

# Document Summarization Backend

This FastAPI backend handles document uploads and summarization using a locally deployed LLM.

## Requirements

- Python 3.x
- Dependencies listed in `requirements.txt`

## Running the Server

1. Create and activate a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Run the server:
   ```bash
   uvicorn main:app --reload
   ```

The server will be available at `http://localhost:8000`.

## Endpoints

- **POST /upload/**: Uploads a document and returns the file path.
- **POST /summarize/**: Summarizes the document based on the file path.

2. Frontend Setup with React
a. Create the React Application

1 Create a new React project:
npx create-react-app document-summary-frontend
cd document-summary-frontend

2 Install Axios for making HTTP requests:
npm install axios

b. Create the Upload Component
1 Modify 'src/App.js':

import React, { useState } from 'react';
import axios from 'axios';

function App() {
    const [file, setFile] = useState(null);
    const [summary, setSummary] = useState('');
    const [error, setError] = useState('');

    const handleFileChange = (e) => {
        setFile(e.target.files[0]);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setSummary('');

        const formData = new FormData();
        formData.append('file', file);

        try {
            const uploadResponse = await axios.post('http://localhost:8000/upload/', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            });

            const filePath = uploadResponse.data.file_path;

            const summaryResponse = await axios.post('http://localhost:8000/summarize/', { file_path: filePath });
            setSummary(summaryResponse.data.summary);
        } catch (error) {
            setError('An error occurred while processing the document.');
            console.error(error);
        }
    };

    return (
        <div className="App">
            <h1>Document Summarizer</h1>
            <form onSubmit={handleSubmit}>
                <input type="file" onChange={handleFileChange} />
                <button type="submit">Upload and Summarize</button>
            </form>
            {error && <p style={{ color: 'red' }}>{error}</p>}
            <h2>Summary:</h2>
            <p>{summary}</p>
        </div>
    );
}

export default App;

2 Create a 'README.md' file:

# Document Summarizer Frontend

This React frontend allows users to upload documents and get summaries using a FastAPI backend.

## Running the Application

1. Install dependencies:
   ```bash
   npm install
   ```

2. Start the development server:
   ```bash
   npm start
   ```

The frontend will be available at `http://localhost:3000`.

3. Running and Testing
a. Start the FastAPI Server
In the 'document-summary-backend' directory:
uvicorn main:app --reload

b. Start the React Application
In the 'document-summary-frontend' directory:
npm start


